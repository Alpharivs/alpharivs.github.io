<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alpharivs on Lux-Sit</title><link>https://alpharivs.github.io/authors/alpharivs/</link><description>Recent content in Alpharivs on Lux-Sit</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="https://twitter.com/alpharivs">Alpharivs&lt;/a></copyright><lastBuildDate>Mon, 21 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alpharivs.github.io/authors/alpharivs/index.xml" rel="self" type="application/rss+xml"/><item><title>Flare-On 2022 - darn_mice</title><link>https://alpharivs.github.io/writeups/darn_mice/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/writeups/darn_mice/</guid><description>Challenge Description “If it crashes its user error.” -Flare Team Challenge Overview We are given a Windows PE32 executable.
+------------------------+------------------------------------------------------------------------------------+ | md5 | cb530dcaf2ac705adb7553fb85c2072e | | sha1 | b952493b9a3590d46d37f74a1e1ef5dc170985a4 | | sha256 | 69300ed34608631e6704d04093001230772f047f8621940ce5f07a6099029f87 | | os | windows | | format | pe | | arch | i386 | | path | darn_mice.exe | +------------------------+------------------------------------------------------------------------------------+ Imports When looking at the imports of the executable there&amp;rsquo;s one that stands out.
Name Function bcrypt.dll BCryptDeriveKeyPBKDF2, BCryptOpenAlgorithmProvider Running capa we can confirm that the executable has encryption capabilities.</description></item><item><title>Flare-On 2022 - Magic 8 Ball</title><link>https://alpharivs.github.io/writeups/magic_8_ball/</link><pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/writeups/magic_8_ball/</guid><description>Challenge Description You got a question? Ask the 8 ball! Challenge Overview +------------------------+------------------------------------------------------------------------------------+ | md5 | 3c2d4ea7b946596096bf039d0043a07b | | sha1 | ae41beb01a7caa07a5b6e847a7c04016539cba64 | | sha256 | 2fcead898d8f900715c9201f246d040eb9686b8f732e683518e8ef92d26dfa89 | | os | windows | | format | pe | | arch | i386 | | path | Magic8Ball.exe | +------------------------+------------------------------------------------------------------------------------+ We are given a Windows x32 exe and a bunch of DLLs and an assets directory.
remnux@remnux:~/flare/magic8$ file * Magic8Ball.exe: PE32 executable (GUI) Intel 80386, for MS Windows libjpeg-9.</description></item><item><title>Flare-On 2022 - Flaredle</title><link>https://alpharivs.github.io/writeups/flare_flaredle/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/writeups/flare_flaredle/</guid><description>Challenge Description Welcome to Flare-On 9 You probably won’t win. Maybe you’re like us and spent the year playing Wordle. We made our own version that is too hard to beat without cheating Play it live at: http://flare-on.com/flaredle/ Challenge Overview Upon loading the website we are presented with some sort of Wordle game. Analysis of the Webapp. When testing the app it seems that it only accepts words with a minimum length. After some testing we can see that the length required is 21 characters, upon reaching the length the error message becomes &amp;ldquo;Word not in list!</description></item><item><title>Flare-On 2022 - Pixel Poker</title><link>https://alpharivs.github.io/writeups/flare_pixelpoker/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/writeups/flare_pixelpoker/</guid><description>Challenge Description I said you wouldn’t win that last one. I lied. The last challenge was basically a captcha. Now the real work begins. Shall we play another game? Challenge Overview A basic check shows us that we have a 32 bit Windows exe file.
remnux@remnux:~/flare/pixelPoker$ file PixelPoker.exe PixelPoker.exe: PE32 executable (GUI) Intel 80386, for MS Windows so let&amp;rsquo;s switch to a Windows VM.
Analysis of the Binary. When we run the file we are presented with the following GUI.</description></item><item><title>Wannacry - Part 2</title><link>https://alpharivs.github.io/malware/wannacry/launcher/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/malware/wannacry/launcher/</guid><description>Introduction In this part of the Wannacry malware analysis we will have a look at the launcher that is dropped by the malware component that we analyzed in part - 1
Sample Details Name tasksche.exe Hashes md5 84c82835a5d21bbcf75a61706d8ab549 Detection Results: Now let&amp;rsquo;s just verify that tasksche.exe is actually the same resource that we first saw when performing the static analysis.
pedump wannacry.exe --extract resource:0x320a4 &amp;gt; resource.exe md5sum resource.exe 84c82835a5d21bbcf75a61706d8ab549 resource.exe PS C:\Users\Euryale\Desktop&amp;gt; Get-FileHash -Alg MD5 .</description></item><item><title>HTB - Shared</title><link>https://alpharivs.github.io/htb_writeups/htb_shared/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/htb_writeups/htb_shared/</guid><description>Enumeration Host Discovery ❯ ping -c3 10.10.11.172 PING 10.10.11.172 (10.10.11.172) 56(84) bytes of data. 64 bytes from 10.10.11.172: icmp_seq=1 ttl=63 time=39.8 ms 64 bytes from 10.10.11.172: icmp_seq=2 ttl=63 time=48.3 ms 64 bytes from 10.10.11.172: icmp_seq=3 ttl=63 time=36.0 ms --- 10.10.11.172 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 36.012/41.390/48.337/5.152 ms A TTL value of around 64 is a solid indicator that this is a Linux system.
Port Scanning We begin by doing a full range TCP and UDP port scan, it&amp;rsquo;s not the quickest method for doing things quickly but covering the full range in both protocols can sometimes save us some headaches.</description></item><item><title>Wannacry - Part 1</title><link>https://alpharivs.github.io/malware/wannacry/dropper/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/malware/wannacry/dropper/</guid><description>Introduction We will be analyzing a sample of the infamous ransomware &amp;ldquo;wannacry&amp;rdquo; and it&amp;rsquo;s behavior and effects in our system, this is not meant to be an analysis of it&amp;rsquo;s cryptographic functions nor a complete reverse engineering of the malware.
We must remember that our objective as malware analysts is to provide information needed to detect, prevent and contain further intrusions that means determining exactly what happened and detecting all the infected machines and examining suspicious files in order to generate useful host/network based signatures to detect and prevent infections in our systems, when falling into a rabbit hole of reverse engineering one must remember what our main objective as analysts is.</description></item><item><title>Malware Analysis Network Setup Guide</title><link>https://alpharivs.github.io/malware/lab-setup-guide/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://alpharivs.github.io/malware/lab-setup-guide/</guid><description>Introduction While I was first setting up my malware analysis lab I had to do some tedious troubleshooting and searching for information yielded too little (sometimes too much) information about how to properly set up an internal network so in an attempt to help those who just want to set up the lab (and to keep the notes of the process to myself) I wrote this post.
We will be setting up an Internal Network with virtualbox running on a Windows host (the process for a Linux host machine is virtually the same) that will allow network interactions between a Remnux VM and a Windows VM.</description></item></channel></rss>